#######################################################################################################################
# Plot the comparison between all available experiment datas and the data generated by the different mechanisms
#######################################################################################################################

# Import packages
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import cantera as ct
import pandas as pd
import argparse


# %% initialise dataloaders
def loaddata_sim(mechanism, nbr_run, equivalence_ratio, reactorPressure, pode):
    path = Path(__file__).parents[2] / 'data/00002-reactor-OME/{}/{}_exp_delays.csv'.format(mechanism[0], nbr_run)
    data = pd.read_csv(path)

    # Select only the data needed for the plot
    data = data[data.pode == pode]
    data = data[data.phi == equivalence_ratio]
    data = data[data.P_0 == reactorPressure * ct.one_atm]

    data = np.array(data)
    return data[:, 3:]


def loaddata_exp(OME, reactorPressure, equivalence_ratio):
    path = Path(__file__).parents[2] / 'data/00004-post-processing/data_exp/Exp_{0}_{1}_{2}.csv'. \
        format(OME, reactorPressure, equivalence_ratio)
    data = np.array(pd.read_csv(path, delimiter=';', decimal=','))
    return data

# %% get input arguments
parser = argparse.ArgumentParser(description="Create exp-mech plots")

parser.add_argument("-mech", "--mechanism_input", type=str, choices=['he', 'sun', 'cai', 'all'], default='he',
                    help="chose reaction mechanism")

parser.add_argument("--pode", type=int, choices=[1, 2, 3, 4], default=3,
                    help="chose degree of polymerization")

parser.add_argument("-phi", "--equivalence_ratio", type=float, default='1.0',
                    help="chose equivalence ratio")

parser.add_argument("-p", "--pressure", type=int, default=20,
                    help="chose reactor pressure")

parser.add_argument("-nbr_run", "--number_run", type=str, default='000',
                    help="define a nbr to identify the started iterator run")

args = parser.parse_args()


mechanism_all = np.array([['he_2018.xml'], ['cai_ome14_2019.xml'], ['sun_2017.xml']])
if args.mechanism_input == 'he':
    mechanism = mechanism_all[0]
elif args.mechanism_input == 'cai':
    mechanism = mechanism_all[1]
elif args.mechanism_input == 'sun':
    mechanism = mechanism_all[2]

pode = args.pode
equivalence_ratio = args.equivalence_ratio
reactorPressure = args.pressure
nbr_run = args.number_run

# %% plot data

fig = plt.figure()
ax = fig.add_subplot(111)

if pode <= 3:
    exp = loaddata_exp('OME' + str(pode), reactorPressure, equivalence_ratio)
    ax.semilogy(exp[:, 0], exp[:, 1], 'bx', label='exp_OME' + str(pode))

    he = np.flip(loaddata_sim(mechanism_all[0], equivalence_ratio, reactorPressure, pode, nbr_run), axis=0)
    cai = np.flip(loaddata_sim(mechanism_all[1], equivalence_ratio, reactorPressure, pode, nbr_run), axis=0)
    sun = np.flip(loaddata_sim(mechanism_all[2], equivalence_ratio, reactorPressure, pode, nbr_run), axis=0)

    ax.semilogy(1000 / he[:, 0], he[:, 2], 'r-', label='sim_he_2018')
    ax.semilogy(1000 / cai[:, 0], cai[:, 2], 'g-', label='sim_cai_2019')
    ax.semilogy(1000 / sun[:, 0], sun[:, 2], 'y-', label='sim_sun_2017')

elif pode == 4:
    exp = loaddata_exp('OME4', reactorPressure, equivalence_ratio)
    ax.semilogy(exp[:, 0], exp[:, 1], 'bx', label='exp_OME4')

    cai = np.flip(loaddata_sim(mechanism_all[1], equivalence_ratio, reactorPressure, pode, nbr_run), axis=0)
    ax.semilogy(1000 / cai[:, 0], cai[:, 2], 'g-', label='sim_cai_2019')

else:
    print('Entered PODE > 4 and not focus of this work')

ax.set_ylabel('Ignition Delay (ms)')
ax.set_xlabel(r'$\frac{1000}{T (K)}$', fontsize=18)

# Add a second axis on top to plot the temperature for better readability
ax2 = ax.twiny()
ticks = ax.get_xticks()
ax2.set_xticks(ticks)
ax2.set_xticklabels((1000 / ticks).round(1))
ax2.set_xlim(ax.get_xlim())
ax2.set_xlabel(r'Temperature: $T(K)$')

textstr = '$\\Phi$={:.1f}\np={:.0f}bar'.format(equivalence_ratio, reactorPressure)
ax.text(0.05, 0.95, textstr, transform=ax.transAxes, fontsize=14, verticalalignment='top')

ax.set_yscale('log')
ax.legend(loc='lower right')

path = Path(__file__).parents[2] / 'data/00004-post-processing/delays_{}_{}_PODE{}.pdf'\
    .format(equivalence_ratio, reactorPressure, pode)
plt.savefig(path)

plt.show()